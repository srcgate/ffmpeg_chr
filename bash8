#!/bin/sh -e

#This script will compile and install a static ffmpeg build with support for nvenc un ubuntu.
#See the prefix path and compile options if edits are needed to suit your needs.

# Based on:  https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
# Based on:  https://gist.github.com/Brainiarc7/3f7695ac2a0905b05c5b
# Rewritten here: https://github.com/ilyaevseev/ffmpeg-build-static/


# Globals
NASM_VERSION="2.15.05"
YASM_VERSION="1.3.0"
LAME_VERSION="3.100"
OPUS_VERSION="1.3.1"
LASS_VERSION="0.14.0"
AMR_VERSION="0.1.5"
OGG_VERSION="1.3.3"
SRT_VERSION="1.4.2"
PKG_VERSION="0.29.2"
LV2_VERSION="1.18.0"
LILV_VERSION="0.24.10"
SERD_VERSION="0.30.6"
SORD_VERSION="0.16.6"
SRATOM_VERSION="0.6.6"
PCRE_VERSION="8.44"
ZLIB_VERSION="1.2.11"
OPENSSL_VERSION="1.1.1"
OPENCORE_VERSION="0.1.5"
XVID_VERSION="1.3.7"
X264_VERSION="20191217-2245"
FDKAAC_VERSION="2.0.1"
CMAKE_VERSION="3.19.2"
CMAKE_SUBVERSION="3.19"
CUDA_VERSION="10.0.130-1"
CUDA_REPO_KEY="http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub"
CUDA_DIR="/usr/local/cuda"
WORK_DIR="$HOME/ffmpeg_sources"
DEST_DIR="$HOME/ffmpeg_build"
HOMEBIN_DIR="$HOME/bin"
BIN_DIR="$HOME/bin"
CMP_PREFIX="$HOME/ffmpeg_build"
CFLAGS="-I$DEST_DIR/include"
LDEXEFLAGS="-static"
LDFLAGS="-L$DEST_DIR/lib"
EXTRALIBS="-ldl -lpthread -lm -lz"

mkdir -p "$WORK_DIR" "$DEST_DIR" "$DEST_DIR/bin" "$BIN_DIR"

export PATH="$DEST_DIR/bin:$PATH"
export PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig:$PKG_CONFIG_PATH"
#PKG_CONFIG="/usr/bin/pkgconf"
#PKG_CONFIG_PATH="/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"

MYDIR="$(cd "$(dirname "$0")" && pwd)"  #"

####  Routines  ################################################

Wget() { wget -cN "$@"; }

Make() { make -j$(nproc); make "$@"; }

Clone() {
    local DIR="$(basename "$1" .git)"

    cd "$WORK_DIR/"
    test -d "$DIR/.git" || git clone --depth=1 "$@"

    cd "$DIR"
    git pull
}

# sudo apt install software-properties-common
# sudo add-apt-repository ppa:ubuntu-toolchain-r/test

PKGS="autoconf automake libtool patch make bzip2 unzip wget git mercurial"
PKGS11="install autoconf automake build-essential libass-dev libtool pkg-config texinfo zlib1g-dev libva-dev cmake mercurial libdrm-dev libvorbis-dev libogg-dev git libx11-dev libperl-dev libpciaccess-dev libpciaccess0 xorg-dev intel-gpu-tools build-dep autoconf automake build-essential libass-dev libtool pkg-config texinfo zlib1g-dev cmake mercurial libdrm mesa xserver-xorg-video-ati xorg-server git llvm-3.4-dev libelf-dev linux-headers-`uname -r` build-essential llvm llvm-dev libelf-dev libdrm-dev sudo apt-get install ccache flex bison cmake g++ git patch zlib1g-dev autoconf xutils-dev libtool pkg-config libpciaccess-dev libz-dev clinfo freeglut3* opencl-headers libwayland-dev xutils-dev ocl-icd-* libssl-dev"
PKGS10="cmake cmake3 cmake-curses-gui zlib1g-dev liblilv-dev yasm libass-dev libogg-dev libopencore-amrnb-dev libopencore-amrwb-dev pkg-config libgcc1 libopus-dev lib32gcc1 libx32gcc1 libmp3lame-dev build-essential autoconf automake libtool libgccs-dev gcc-multilib g++-multilib gcc-7 g++-7 gcc-8 g++-8 gcc-9 g++-9 g++"
PKGS9="libfreetype6-dev libdrm-dev p11-kit libva-dev libvdpau-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev texinfo"
PKGS8="wget libchromaprint-dev frei0r-plugins-dev gnutls-dev ladspa-sdk libcaca-dev libcdio-paranoia-dev libcodec2-dev libfontconfig1-dev libfreetype6-dev"
PKGS7="libfribidi-dev libgme-dev libgsm1-dev libjack-dev libmodplug-dev libopenjp2-7-dev libopenmpt-dev"
PKGS6="libpulse-dev librsvg2-dev librubberband-dev librtmp-dev libshine-dev libsmbclient-dev libsnappy-dev libsoxr-dev libspeex-dev libssh-dev"
PKGS5="libtesseract-dev libtheora-dev libtwolame-dev libv4l-dev libvo-amrwbenc-dev libwavpack-dev libwebp-dev"
PKGS4="libxml2-dev libzmq3-dev libzvbi-dev libopenal-dev opencl-dev libjack-dev git libx11-dev libperl-dev"
PKGS3="libpciaccess-dev libpciaccess0 xorg-dev intel-gpu-tools opencl-headers libwayland-dev xutils-dev ocl-icd-* libssl-dev libbz2-1.0 libbz2-dev libbz2-ocaml"
PKGS2="apt-clone libbz2-ocaml-dev python-dev python-bzutils libbz2-dev libbz2-1.0 libbz2-dev libbz2-ocaml libbz2-ocaml-dev"
PKGS1="unzip build-essential autoconf automake libtool git checkinstall autoconf automake libtool shtool patch make bzip2 unzip wget git mercurial tclsh git-all xz-utils libnuma-dev"

installAptLibs() {
	echo "####  APT - LIBS  ################################################"
    sudo apt-get update
	sudo add-apt-repository ppa:oibaf/graphics-drivers
	for i in $PKGS; do
	  sudo apt-get -y install $i
	done
	for i in $PKGS1 $PKGS2 $PKGS3 $PKGS4 $PKGS5 $PKGS6 $PKGS7 $PKGS8 $PKGS9 $PKGS10 $PKGS11; do
	  sudo apt-get -y --force-yes install $i
	done
    sudo apt-get -y --force-yes install \
      build-essential texi2html software-properties-common \
      libfreetype6-dev libgpac-dev libtheora-dev libva-dev \
      libvdpau-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev
	  # pkg-config libvorbis-dev zlib1g-dev libsdl1.2-dev
}

installYumLibs() {
    sudo yum -y install $PKGS freetype-devel gcc gcc-c++ pkgconfig zlib-devel \
      libtheora-devel libvorbis-devel libva-devel
}

installLibs() {
    echo "Installing prerequisites"
    . /etc/os-release
    case "$ID" in
        ubuntu | linuxmint ) installAptLibs ;;
        * )                  installYumLibs ;;
    esac
}

installCUDASDKdeb() {
    echo "####  CUDA - SDK  ################################################"
    UBUNTU_VERSION="$1"
    local CUDA_REPO_URL="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu${UBUNTU_VERSION}/x86_64/cuda-repo-ubuntu1804_${CUDA_VERSION}_amd64.deb"
    Wget "$CUDA_REPO_URL"
    sudo dpkg -i "$(basename "$CUDA_REPO_URL")"
    sudo apt-key adv --fetch-keys "$CUDA_REPO_KEY"
    sudo apt-get -y update
    sudo apt-get -y install cuda

    sudo env LC_ALL=C.UTF-8 add-apt-repository -y ppa:graphics-drivers/ppa
    sudo apt-get -y update
    sudo apt-get -y upgrade
}

installCUDASDKyum() {
    rpm -q cuda-repo-rhel7 2>/dev/null ||
       sudo yum install -y "https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-repo-rhel7-${CUDA_VERSION}.x86_64.rpm"
    sudo yum install -y cuda
}

installCUDASDK() {
    echo "Installing CUDA and the latest driver repositories from repositories"
    cd "$WORK_DIR/"

    . /etc/os-release
    case "$ID-$VERSION_ID" in
        ubuntu-16.04 ) installCUDASDKdeb 1604 ;;
        ubuntu-18.04 ) installCUDASDKdeb 1804 ;;
        linuxmint-19.1)installCUDASDKdeb 1804 ;;
        centos-7     ) installCUDASDKyum ;;
        * ) echo "ERROR: only CentOS 7, Ubuntu 16.04 or 18.04 are supported now."; exit 1;;
    esac
}

installNvidiaSDK() {
	echo "####  NVENC - SDK  ################################################"
    echo "Installing the nVidia NVENC SDK."
    Clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
    make
    make install PREFIX="$DEST_DIR"
    patch --force -d "$DEST_DIR" -p1 < "$MYDIR/dynlink_cuda.h.patch" ||
        echo "..SKIP PATCH, POSSIBLY NOT NEEDED. CONTINUED.."
		
	CFLAGS+=" -I/usr/local/cuda/include"
	LDFLAGS+=" -L/usr/local/cuda/lib64"
}

compileNasm() {
	echo "####  NASM  ################################################"
    echo "Compiling nasm"
    cd "$WORK_DIR/"
    Wget "http://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/nasm-$NASM_VERSION.tar.gz"
    tar xzvf "nasm-$NASM_VERSION.tar.gz"
    cd "nasm-$NASM_VERSION"
    ./configure --bindir="$CMP_PREFIX" --bindir="$HOMEBIN_DIR"
	make -j$(nproc) VERBOSE=1
	make -j$(nproc) install
	make -j$(nproc) distclean
}

compileLibX264() {
	echo "####  X264  ################################################"
    echo "Compiling libx264"
    cd "$WORK_DIR/"
    Clone http://git.videolan.org/git/x264.git
	PATH="$HOME/bin:$PATH" ./configure --prefix="$CMP_PREFIX" --enable-static --enable-pic --bit-depth=all
	PATH="$HOME/bin:$PATH" make -j$(nproc) VERBOSE=1
	make -j$(nproc) install VERBOSE=1
	make -j$(nproc) distclean
}

compileLibX265() {
	echo "####  X265  ################################################"
	echo "Compiling libx265"
    cd "$WORK_DIR/"
    Clone https://bitbucket.org/multicoreware/x265_git.git
	cd "$WORK_DIR/x265_git"*
	cd "build/linux"
	PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$CMP_PREFIX" -DENABLE_SHARED:bool=off ../../source
	make -j$(nproc) VERBOSE=1
	make -j$(nproc) install VERBOSE=1
	make -j$(nproc) clean VERBOSE=1
}

compileLibfdkaac() {
	echo "####  FDK AAC  ################################################"
    echo "Compiling libfdk-cc"
    cd "$WORK_DIR/"
    Clone https://github.com/mstorsjo/fdk-aac.git
	autoreconf -fiv
	./configure --prefix="$CMP_PREFIX" --disable-shared
	make -j$(nproc)
	make -j$(nproc) install
	make -j$(nproc) distclean
}

compileLibVpx() {
	echo "####  VPX  ################################################"
    echo "Compiling libvpx"
    cd "$WORK_DIR/"
    Clone https://github.com/webmproject/libvpx.git
	./configure --prefix="$CMP_PREFIX" --enable-runtime-cpu-detect --cpu=native --as=nasm --enable-vp8 --enable-vp9 --enable-postproc-visualizer --disable-examples --disable-unit-tests --enable-static --disable-shared --enable-multi-res-encoding --enable-postproc --enable-vp9-postproc --enable-vp9-highbitdepth --enable-pic --enable-webm-io --enable-libyuv
	make -j$(nproc)
	make -j$(nproc) install
	make clean -j$(nproc)
	make distclean
}

compileLibVorbis() {
	echo "####  LIB VORBIS  ################################################"
	echo "####  --enable-libvorbis ####"
    echo "Compiling libvorbis"
    cd "$WORK_DIR/"
    Wget -O vorbis.zip https://gitlab.xiph.org/xiph/vorbis/-/archive/master/vorbis-master.zip
    unzip -o vorbis.zip
    cd vorbis-master*
    autoreconf -fiv
	./configure --enable-static --prefix="$CMP_PREFIX"
    make -j$(nproc)
	make -j$(nproc) install
	make clean -j$(nproc)
	make distclean
}

compileLibsdl2() {
	echo "####  LIB SDL  ################################################"
    echo "Compiling libsdl"
    cd "$WORK_DIR/"
    Wget -O libdsl.zip http://hg.libsdl.org/SDL/archive/tip.zip
    unzip -o libsdl.zip
    cd SDL-*
    ./autogen.sh -ivf
    PATH="$HOME/bin:$PATH" ./configure --prefix="$CMP_PREFIX" --with-x --with-pic=yes --disable-alsatest --enable-pthreads --enable-static=yes --enable-shared=no
	make -j$(nproc) VERBOSE=1
	make -j$(nproc) install VERBOSE=1
	make -j$(nproc) clean VERBOSE=1
}

compileLibAom() {
	echo "####  AOM  ################################################"
	echo "####  --enable-libaom ####"
    echo "Compiling libaom"
	cd "$WORK_DIR/"
    Clone https://aomedia.googlesource.com/aom
	cd aom*
	rm -rf CMakeCache.txt CMakeFiles
	cd "$WORK_DIR/"
	mkdir -p "$WORK_DIR/aom_build"
	cd "$WORK_DIR/aom_build/"
	PATH="$HOME/bin:$PATH"  cmake -DENABLE_TESTS=0 -DCMAKE_INSTALL_PREFIX="$CMP_PREFIX" -DCMAKE_INSTALL_LIBDIR=lib ../aom
    make -j$(nproc) VERBOSE=1
	make -j$(nproc) install VERBOSE=1
	make -j$(nproc) clean VERBOSE=1
}

compileLibXvid() {
	echo "####  Xvid  ################################################"
	echo "####  --enable-libxvid ####"
    echo "Compiling libxvid"
    cd "$WORK_DIR/"
    Wget https://downloads.xvid.com/downloads/xvidcore-$XVID_VERSION.tar.gz
    tar xzvf "xvidcore-$XVID_VERSION.tar.gz"
    cd "xvidcore"*
    cd "build/generic"
    PATH="$HOME/bin:$PATH" ./configure --bindir="$CMP_PREFIX" --disable-shared --enable-static
    make -j$(nproc) VERBOSE=1
	make -j$(nproc) install VERBOSE=1
	make -j$(nproc) clean VERBOSE=1
	if [[ -f "$DEST_DIR"/lib/libxvidcore.4.dylib ]]; then
		execute rm "$DEST_DIR/lib/libxvidcore.4.dylib"
	fi

	if [[ -f "$DEST_DIR"/lib/libxvidcore.so ]]; then
		execute rm "$DEST_DIR"/lib/libxvidcore.so*
	fi
}

compileFFmpegPre(){
	echo "####  FFMPEG3  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    Clone https://github.com/FFmpeg/FFmpeg -b master
	cd "$WORK_DIR/"
	mv "FFmpeg/" "FFmpeg2/"
}

compileFfmpeg(){
	echo "####  FFMPEG  ################################################"
    echo "Compiling ffmpeg"
    Clone https://github.com/FFmpeg/FFmpeg -b master

    export PATH="$CUDA_DIR/bin:$PATH"  # ..path to nvcc
    PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig" \
    ./configure \
      --pkg-config-flags="--static" \
      --bindir="$CMP_PREFIX" \
      --bindir="$HOMEBIN_DIR" \
      --extra-cflags="-I $DEST_DIR/include -I $CUDA_DIR/include/" \
      --extra-ldflags="-L $DEST_DIR/lib -L $CUDA_DIR/lib64/" \
      --extra-libs="-lpthread" \
      --enable-cuda \
      --enable-cuda-sdk \
      --enable-cuvid \
      --enable-libnpp \
      --enable-gpl \
      --enable-libass \
      --enable-libfdk-aac \
      --enable-vaapi \
      --enable-libfreetype \
      --enable-libmp3lame \
      --enable-libopus \
      --enable-libtheora \
      --enable-libvorbis \
      --enable-libvpx \
      --enable-libx264 \
      --enable-libx265 \
      --enable-nonfree \
      --enable-libaom \
      --enable-nvenc
    Make install distclean
    hash -r
}

compileFFmpegX(){
	echo "####  FFMPEG3  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    Clone https://github.com/FFmpeg/FFmpeg -b master
    export PATH="$HOME/bin:$PATH"
	export PKG_CONFIG="/usr/bin/pkgconf"
	export PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
    ./configure \
--prefix=/root/FFmpeg/target
 --extra-cflags=-I/root/FFmpeg/target/include
 --extra-ldflags='-L/root/FFmpeg/target/lib -Wl,-Bstatic -lcrypto -lssl -Wl,-Bdynamic'
 --extra-version=XUI10FFMPEG 
 --disable-debug
 --disable-shared
 --enable-libx265
 --enable-static
 --extra-cflags=--static
 --disable-ffplay
 --disable-doc
 --enable-gpl
 --enable-pthreads
 --enable-postproc
 --enable-libass
 --enable-gray
 --enable-runtime-cpudetect
 --enable-libfreetype
 --enable-libmp3lame
 --enable-libopus
 --enable-libtheora
 --enable-libvorbis
 --enable-gnutls
 --enable-libx264
 --enable-libxvid
 --enable-bzlib
 --enable-fontconfig
 --enable-zlib
 --enable-version3
 --enable-libvpx
 --enable-libxavs
 --enable-nvenc
 --enable-ffnvcodec
 --enable-cuvid
 --disable-autodetect
 --disable-alsa
 --disable-indev=alsa
 --disable-outdev=alsa
 --enable-librtmp
 --extra-libs='-lsupc++ -lgmp -lz -lunistring -lpthread -lm -lrt -ldl'
 
--prefix=/usr
 --enable-gpl
 --enable-nonfree
 --enable-version3
 --enable-muxer=rtsp
 --enable-protocol=rtp
 --enable-demuxer=rtsp
 --enable-bzlib
 --enable-frei0r
 --enable-ladspa
 --enable-openal
 --enable-libass
 --enable-libdc1394
 --enable-libfreetype
 --enable-libfontconfig
 --enable-libfribidi
 --enable-libgsm
 --enable-libmp3lame
 --enable-libpulse
 --enable-libsoxr
 --enable-libspeex
 --enable-libtheora
 --enable-libvorbis
 --enable-libvpx
 --enable-libx264
 --enable-libx265
 --enable-libxvid
 --enable-libfdk_aac
 --enable-libxml2
 --enable-libcv2
 --enable-static
 --enable-runtime-cpudetect
 --enable-openssl
 --disable-vdpau
 --disable-doc
 --disable-shared
 --extra-cflags=-fopenmp
 --extra-ldflags=-fopenmp
 --disable-libmfx
 --enable-cuda
 --enable-cuvid
 --enable-nvdec
 --enable-nvenc
 --enable-libnpp
 --enable-cuda-sdk
 --extra-cflags=-I/usr/local/cuda/include
 --extra-ldflags=-L/usr/local/cuda/lib64
 --extra-cflags=-DCONFIG_LCNS_AUTH
 --extra-ldflags=-L/root/xaccel-codec/lcns
 --extra-libs='-llcns -lssl -lcrypto -lz -ljansson'
}

compileFFmpeg2(){
	echo "####  FFMPEG2  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    Clone https://github.com/FFmpeg/FFmpeg -b master
    export PATH="$HOME/bin:$PATH"
	export PKG_CONFIG="/usr/bin/pkgconf"
	export PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
    ./configure \
		--pkg-config-flags="--static" \
		--enable-static --disable-shared \
		--bindir="$CMP_PREFIX" \
		--bindir="$HOMEBIN_DIR" \
		--extra-cflags="-I $DEST_DIR/include -I /usr/include" \
		--extra-ldflags="-L $DEST_DIR/lib -L /usr/lib" \
		--extra-ldexeflags=-static \
		--enable-runtime-cpudetect \
		--extra-libs=-lpthread \
		--extra-libs="-lpthread -lm -lz -ldl" \
		--enable-ladspa \
		--enable-libaom \
		--enable-libass \
		--enable-libcaca \
		--enable-libcdio \
		--enable-libcodec2 \
		--enable-libdrm \
		--enable-libfontconfig \
		--enable-libfreetype \
		--enable-libfribidi \
		--enable-libfdk-aac \
		--enable-libgme \
		--enable-libgsm \
		--enable-libjack \
		--enable-libmodplug \
		--enable-libmp3lame \
		--enable-libnpp \
		--enable-libopencore-amrnb \
		--enable-libopencore-amrwb \
		--enable-libopencore-amrwb \
		--enable-libopenjpeg \
		--enable-libopenmpt \
		--enable-libopus \
		--enable-libpulse \
		--enable-librubberband \
		--enable-libshine \
		--enable-libsnappy \
		--enable-libsoxr \
		--enable-libspeex \
		--enable-libssh \
		--enable-libsrt \
		--enable-libtheora \
		--enable-libtwolame \
		--enable-libvo-amrwbenc \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libwebp \
		--enable-libxvid \
		--enable-libzvbi \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libxcb \
		--enable-lv2 \
		--enable-gpl \
		--enable-openal \
		--enable-opengl \
		--enable-openssl \
		--enable-nonfree \
		--enable-version3 \
		--enable-muxer=rtsp \
		--enable-protocol=rtp \
		--enable-demuxer=rtsp \
		--enable-bzlib \
		--enable-frei0r \
		--enable-libmp3lame \
		--enable-libtheora \
		--enable-opencl \
		--enable-pic \
		--enable-nonfree \
		--enable-small  \
		--enable-chromaprint \
		--enable-frei0r \
		--enable-gmp \
		--disable-debug \
		--enable-static
	PATH="$HOME/bin:$PATH"
	make -j$(nproc) 
	make -j$(nproc) install 
	make -j$(nproc) distclean
    hash -r
}

compileFFmpeg3(){
	echo "####  FFMPEG3  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    Clone https://github.com/FFmpeg/FFmpeg -b master
    export PATH="$HOME/bin:$PATH" 
	export PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig"
	PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig" \
    ./configure \
		--cc=gcc \
		--pkg-config-flags="--static" \
		--pkgconfigdir="$DEST_DIR/lib/pkgconfig" \
		--enable-static --disable-shared \
	    --bindir="$CMP_PREFIX" \
        --bindir="$HOMEBIN_DIR" \
		--extra-cflags="-I $DEST_DIR/include" \
		--extra-ldflags="-L $DEST_DIR/lib" \
        --extra-cflags="-I /usr/include" \
        --extra-ldflags="-L /usr/lib" \
	    --extra-cflags="-I/usr/local/include" \
        --extra-ldflags="-L/usr/local/lib" \
        --extra-ldexeflags=-static \
		--enable-runtime-cpudetect \
		--extra-libs=-lpthread \
		--extra-libs="-lpthread -lm -lz -ldl -lstdc++ -lgcc_s -lgcc -lgcc_s -lgcc -lrt -lnuma" \
        --enable-ladspa \
        --enable-libaom \
        --enable-libcdio \
        --enable-libfontconfig \
        --enable-libfreetype \
        --enable-libfdk-aac \
        --enable-libgsm \
        --enable-libjack \
        --enable-libmp3lame \
        --enable-libopencore-amrnb \
        --enable-libopencore-amrwb \
        --enable-libopencore-amrwb \
        --enable-libopus \
        --enable-libsnappy \
        --enable-libspeex \
        --enable-libtheora \
        --enable-libtwolame \
        --enable-libvo-amrwbenc \
        --enable-libvorbis \
        --enable-libvpx \
        --enable-libwebp \
        --enable-libxvid \
        --enable-libzvbi \
        --enable-libx264 \
		--enable-libx265 \
        --enable-libxcb \
        --enable-gpl \
        --enable-openssl \
        --enable-nonfree \
        --enable-version3 \
        --enable-muxer=rtsp \
        --enable-protocol=rtp \
        --enable-demuxer=rtsp \
        --enable-bzlib \
        --enable-frei0r \
        --enable-pic \
        --enable-nonfree \
        --enable-small  \
        --enable-frei0r \
        --enable-gmp \
        --disable-debug \
        --enable-static
		PATH="$HOME/bin:$PATH" make -j$(nproc) 
		make -j$(nproc) install 
		make -j$(nproc) distclean 
		hash -r
}

compileFFmpeg4(){
	echo "####  FFMPEG3  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    cp -r "FFmpeg2/" "FFmpeg/"
	cd "$WORK_DIR/FFmpeg"
	export PATH="$HOME/bin:/usr/lib/x86_64-linux-gnu:$PATH"
    export PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"
    PATH="$HOME/bin:/usr/lib/x86_64-linux-gnu:$PATH" \
	PKG_CONFIG_PATH="$DEST_DIR/lib/pkgconfig:$DEST_DIR/lib64/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" \
    ./configure \
		--cc=gcc \
		--pkg-config-flags="--static" \
		--pkgconfigdir="$PKG_CONFIG_PATH" \
		--pkgconfigdir="$DEST_DIR/lib/pkgconfig" \
		--pkgconfigdir="/usr/lib/x86_64-linux-gnu/pkgconfig" \
		--enable-static \
		--disable-shared \
	    --bindir="$CMP_PREFIX" \
        --bindir="$BIN_DIR" \
		--extra-cflags="-I$DEST_DIR/include" \
		--extra-ldflags="-L$DEST_DIR/lib" \
        --extra-cflags="-I/usr/include" \
        --extra-ldflags="-L/usr/lib" \
	    --extra-cflags="-I/usr/local/include" \
        --extra-ldflags="-L/usr/local/lib" \
        --extra-ldexeflags=-static \
		--enable-runtime-cpudetect \
		--extra-libs=-lpthread \
		--extra-libs="-lpthread -lm -lz -ldl -lass" \
		--enable-ladspa \
		--enable-libaom \
		--enable-libass \
		--enable-libcaca \
		--enable-libcdio \
		--enable-libcodec2 \
		--enable-libdrm \
		--enable-libfontconfig \
		--enable-libfreetype \
		--enable-libfribidi \
		--enable-libfdk-aac \
		--enable-libgme \
		--enable-libgsm \
		--enable-libjack \
		--enable-libmodplug \
		--enable-libmp3lame \
		--enable-libopencore-amrnb \
		--enable-libopencore-amrwb \
		--enable-libopencore-amrwb \
		--enable-libopenjpeg \
		--enable-libopenmpt \
		--enable-libopus \
		--enable-libpulse \
		--enable-librubberband \
		--enable-libshine \
		--enable-libsnappy \
		--enable-libsoxr \
		--enable-libspeex \
		--enable-libssh \
		--enable-libsrt \
		--enable-libtheora \
		--enable-libtwolame \
		--enable-libvo-amrwbenc \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libwebp \
		--enable-libxvid \
		--enable-libzvbi \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libxcb \
		--enable-lv2 \
		--enable-gpl \
		--enable-openal \
		--enable-opengl \
		--enable-openssl \
		--enable-nonfree \
		--enable-version3 \
		--enable-muxer=rtsp \
		--enable-protocol=rtp \
		--enable-demuxer=rtsp \
		--enable-bzlib \
		--enable-frei0r \
		--enable-libmp3lame \
		--enable-libtheora \
		--enable-opencl \
		--enable-pic \
		--enable-nonfree \
		--enable-small  \
		--enable-frei0r \
		--enable-gmp \
		--disable-debug \
		--enable-static
		PATH="$HOME/bin:/usr/lib/x86_64-linux-gnu:$PATH" \
		make -j$(nproc) 
		make -j$(nproc) install 
		make -j$(nproc) distclean 
		hash -r
}


compileFFmpeg5(){
	echo "####  FFMPEG3  ################################################"
    echo "Compiling ffmpeg"
	cd "$WORK_DIR/"
    rm -rf "FFmpeg/"
    cp -r "FFmpeg2/" "FFmpeg/"
	cd "$WORK_DIR/FFmpeg"
	export PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig:$PKG_CONFIG_PATH"
	PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
	  --pkg-config-flags="--static" \
	  --enable-static --disable-shared \
	  --prefix="$HOME/ffmpeg_build" \
	  --bindir="$HOME/bin" \
	  --extra-cflags="-I$HOME/ffmpeg_build/include" \
	  --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
	  --enable-opencl \
	  --disable-debug \
	  --enable-libdrm \
	  --enable-gpl \
	  --enable-runtime-cpudetect \
	  --enable-libfdk-aac \
	  --enable-libx264 \
	  --enable-libx265 \
	  --enable-openssl \
	  --enable-pic \
	  --extra-libs="-lpthread -lm -lz -ldl" \
	  --enable-nonfree \
	  --enable-libass \
	  --extra-libs=-lpthread \
	  --enable-libxcb \
	  --enable-libpulse \
	  --enable-nonfree \
	  --enable-small  \
	  --enable-chromaprint \
	  --enable-frei0r \
	  --enable-gmp \
	  --enable-ladspa \
	  --enable-libaom \
	  --enable-libcaca \
	  --enable-libcdio \
	  --enable-libcodec2 \
	  --enable-libfontconfig \
	  --enable-libfreetype \
	  --enable-libfribidi \
	  --enable-libgme \
	  --enable-libgsm \
	  --enable-libjack \
	  --enable-libmodplug \
	  --enable-libmp3lame \
	  --enable-libopencore-amrnb \
	  --enable-libopencore-amrwb \
	  --enable-libopencore-amrwb \
	  --enable-libopenjpeg \
	  --enable-libopenmpt \
	  --enable-libopus \
	  --enable-librubberband \
	  --enable-libshine \
	  --enable-libsnappy \
	  --enable-libsoxr \
	  --enable-libspeex \
	  --enable-libssh \
	  --enable-libtheora \
	  --enable-libtwolame \
	  --enable-libvo-amrwbenc \
	  --enable-libwavpack \
	  --enable-libwebp \
	  --enable-libxvid \
	  --enable-libzvbi \
	  --enable-lv2 \
	  --enable-openal \
	  --enable-opengl \
	  --enable-version3 \
	  --enable-muxer=rtsp \
	  --enable-protocol=rtp \
	  --enable-demuxer=rtsp \
	  --enable-bzlib \
	  --enable-frei0r \
	  --enable-static
	PATH="$HOME/bin:$PATH" make -j$(nproc) 
	make -j$(nproc) install 
	make -j$(nproc) distclean 
	hash -r
}



installLibs
#installCUDASDK
#installNvidiaSDK

compileNasm
compileLibX264
compileLibX265
compileLibfdkaac
compileLibVpx
compileLibVorbis
compileLibsdl2
compileLibAom
compileLibXvid
compileFFmpegPre
compileFFmpeg5

echo "Complete!"

echo "apt-get install -y libjack-dev libopenal-dev libvdpau-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libcdio-paranoia-dev libcaca-dev libxv1 liblilv-dev librubberband-dev libass-dev libva-dev libgme-dev libmodplug-dev libopenmpt-dev  libchromaprint-dev libssh-dev libopencore-amrnb-dev libopencore-amrwb-dev libcodec2-dev libvo-amrwbenc-dev"
echo "sudo apt install ocl-icd-opencl-dev"
## END ##
